DROP TABLE "EUCOMM_VECTOR"."GRC_ALT_CLONE_ALTERNATE";

DROP SEQUENCE "EUCOMM_VECTOR"."S_GRC_ALT_CLONE_ALTERNATE_ID";

DROP TABLE "EUCOMM_VECTOR"."GRC_ALT_CLONE_CHOSEN";

DROP SEQUENCE "EUCOMM_VECTOR"."S_GRC_ALT_CLONE_CHOSEN_ID";

DROP TABLE "EUCOMM_VECTOR"."GRC_RESEQ";

DROP SEQUENCE "EUCOMM_VECTOR"."S_GRC_RESEQ_ID";

DROP TABLE "EUCOMM_VECTOR"."GRC_GATEWAY";

DROP SEQUENCE "EUCOMM_VECTOR"."S_GRC_GATEWAY_ID";

DROP TABLE "EUCOMM_VECTOR"."GRC_REDESIGN";

DROP SEQUENCE "EUCOMM_VECTOR"."S_GRC_REDESIGN_ID";

DROP TABLE "EUCOMM_VECTOR"."GR_ALT_CLONE";

DROP SEQUENCE "EUCOMM_VECTOR"."S_GR_ALT_CLONE_ID";

DROP TABLE "EUCOMM_VECTOR"."GR_GATEWAY";

DROP SEQUENCE "EUCOMM_VECTOR"."S_GR_GATEWAY_ID";

DROP TABLE "EUCOMM_VECTOR"."GR_REDESIGN";

DROP SEQUENCE "EUCOMM_VECTOR"."S_GR_REDESIGN_ID";

DROP TABLE "EUCOMM_VECTOR"."GR_GENE_STATUS_HISTORY";

DROP SEQUENCE "EUCOMM_VECTOR"."S_GR_GENE_STATUS_HISTORY_ID";

DROP TABLE "EUCOMM_VECTOR"."GR_GENE_STATUS";

DROP SEQUENCE "EUCOMM_VECTOR"."S_GR_GENE_STATUS_ID";

DROP TABLE "EUCOMM_VECTOR"."GR_VALID_STATE";

CREATE SEQUENCE "EUCOMM_VECTOR"."S_GR_GENE_STATUS_ID";

CREATE SEQUENCE "EUCOMM_VECTOR"."S_GR_GENE_STATUS_HISTORY_ID";

CREATE SEQUENCE "EUCOMM_VECTOR"."S_GR_REDESIGN_ID";

CREATE SEQUENCE "EUCOMM_VECTOR"."S_GR_GATEWAY_ID";

CREATE SEQUENCE "EUCOMM_VECTOR"."S_GR_ALT_CLONE_ID";

CREATE SEQUENCE "EUCOMM_VECTOR"."S_GRC_REDESIGN_ID";

CREATE SEQUENCE "EUCOMM_VECTOR"."S_GRC_GATEWAY_ID";

CREATE SEQUENCE "EUCOMM_VECTOR"."S_GRC_RESEQ_ID";

CREATE SEQUENCE "EUCOMM_VECTOR"."S_GRC_ALT_CLONE_CHOSEN_ID";

CREATE SEQUENCE "EUCOMM_VECTOR"."S_GRC_ALT_CLONE_ALTERNATE_ID";

CREATE TABLE "EUCOMM_VECTOR"."GR_VALID_STATE" ("STATE" VARCHAR2(20 CHAR) NOT NULL PRIMARY KEY, "DESCRIPTION" VARCHAR2(200 CHAR));

CREATE TABLE "EUCOMM_VECTOR"."GR_GENE_STATUS" ("GR_GENE_STATUS_ID" NUMBER NOT NULL PRIMARY KEY, "MGI_GENE_ID" NUMBER NOT NULL UNIQUE REFERENCES MGI_GENE(MGI_GENE_ID), "STATE" VARCHAR2(20 CHAR) NOT NULL REFERENCES GR_VALID_STATE(STATE), "NOTE" VARCHAR2(200 CHAR), "UPDATED" TIMESTAMP NOT NULL);

CREATE TABLE "EUCOMM_VECTOR"."GR_GENE_STATUS_HISTORY" ("GR_GENE_STATUS_HISTORY_ID" NUMBER NOT NULL PRIMARY KEY, "MGI_GENE_ID" NUMBER NOT NULL REFERENCES MGI_GENE(MGI_GENE_ID), "STATE" VARCHAR2(20 CHAR) NOT NULL REFERENCES GR_VALID_STATE(STATE), "NOTE" VARCHAR2(200 CHAR), "UPDATED" TIMESTAMP NOT NULL);

CREATE TABLE "EUCOMM_VECTOR"."GR_REDESIGN" ("GR_REDESIGN_ID" NUMBER NOT NULL PRIMARY KEY, "GR_GENE_STATUS_ID" NUMBER NOT NULL REFERENCES GR_GENE_STATUS(GR_GENE_STATUS_ID) ON DELETE CASCADE, "RDR_WELL_ID" NUMBER NOT NULL REFERENCES WELL(WELL_ID));

CREATE TABLE "EUCOMM_VECTOR"."GR_GATEWAY" ("GR_GATEWAY_ID" NUMBER NOT NULL PRIMARY KEY, "GR_GENE_STATUS_ID" NUMBER NOT NULL REFERENCES GR_GENE_STATUS(GR_GENE_STATUS_ID) ON DELETE CASCADE, "GWR_WELL_ID" NUMBER NOT NULL REFERENCES WELL(WELL_ID));

CREATE TABLE "EUCOMM_VECTOR"."GR_ALT_CLONE" ("GR_ALT_CLONE_ID" NUMBER NOT NULL PRIMARY KEY, "GR_GENE_STATUS_ID" NUMBER NOT NULL REFERENCES GR_GENE_STATUS(GR_GENE_STATUS_ID) ON DELETE CASCADE, "ACR_WELL_ID" NUMBER NOT NULL REFERENCES WELL(WELL_ID));

CREATE TABLE "EUCOMM_VECTOR"."GRC_REDESIGN" ("GRC_REDESIGN_ID" NUMBER NOT NULL PRIMARY KEY, "GR_GENE_STATUS_ID" NUMBER NOT NULL REFERENCES GR_GENE_STATUS(GR_GENE_STATUS_ID) ON DELETE CASCADE, "DESIGN_WELL_ID" NUMBER NOT NULL REFERENCES WELL(WELL_ID));

CREATE TABLE "EUCOMM_VECTOR"."GRC_GATEWAY" ("GRC_GATEWAY_ID" NUMBER NOT NULL PRIMARY KEY, "GR_GENE_STATUS_ID" NUMBER NOT NULL REFERENCES GR_GENE_STATUS(GR_GENE_STATUS_ID) ON DELETE CASCADE, "PCS_WELL_ID" NUMBER NOT NULL REFERENCES WELL(WELL_ID), "VALID_PRIMERS" VARCHAR2(200 CHAR) NOT NULL);

CREATE TABLE "EUCOMM_VECTOR"."GRC_RESEQ" ("GRC_RESEQ_ID" NUMBER NOT NULL PRIMARY KEY, "GR_GENE_STATUS_ID" NUMBER NOT NULL REFERENCES GR_GENE_STATUS(GR_GENE_STATUS_ID) ON DELETE CASCADE, "TARGVEC_WELL_ID" NUMBER NOT NULL REFERENCES WELL(WELL_ID), "VALID_PRIMERS" VARCHAR2(200 CHAR) NOT NULL);

CREATE TABLE "EUCOMM_VECTOR"."GRC_ALT_CLONE_CHOSEN" ("GRC_ALT_CLONE_CHOSEN_ID" NUMBER NOT NULL PRIMARY KEY, "GR_GENE_STATUS_ID" NUMBER NOT NULL REFERENCES GR_GENE_STATUS(GR_GENE_STATUS_ID) ON DELETE CASCADE, "CHOSEN_WELL_ID" NUMBER NOT NULL REFERENCES WELL(WELL_ID), "CHOSEN_CLONE_NAME" VARCHAR2(200 CHAR) NOT NULL, "CHILD_PLATES" VARCHAR2(400 CHAR) NOT NULL);

CREATE TABLE "EUCOMM_VECTOR"."GRC_ALT_CLONE_ALTERNATE" ("GRC_ALT_CLONE_ALTERNATE_ID" NUMBER NOT NULL PRIMARY KEY, "GR_GENE_STATUS_ID" NUMBER NOT NULL REFERENCES GR_GENE_STATUS(GR_GENE_STATUS_ID) ON DELETE CASCADE, "ALT_CLONE_WELL_ID" NUMBER NOT NULL REFERENCES WELL(WELL_ID));

CREATE OR REPLACE TRIGGER "EUCOMM_VECTOR"."TR_GR_GENE_STATUS_ID"
    before insert on "GR_GENE_STATUS"
        for each row begin
            if inserting then
                if :NEW."GR_GENE_STATUS_ID" is null then
                    select S_GR_GENE_STATUS_ID.nextval into :NEW."GR_GENE_STATUS_ID" from dual;
                end if;
            end if;
        end;
/
ALTER TRIGGER "EUCOMM_VECTOR"."TR_GR_GENE_STATUS_ID" ENABLE;

CREATE OR REPLACE TRIGGER "EUCOMM_VECTOR"."TR_GR_GENE_STATUS_HISTORY_ID"
    before insert on "GR_GENE_STATUS_HISTORY"
        for each row begin
            if inserting then
                if :NEW."GR_GENE_STATUS_HISTORY_ID" is null then
                    select S_GR_GENE_STATUS_HISTORY_ID.nextval into :NEW."GR_GENE_STATUS_HISTORY_ID" from dual;
                end if;
            end if;
        end;
/
ALTER TRIGGER "EUCOMM_VECTOR"."TR_GR_GENE_STATUS_HISTORY_ID" ENABLE;

CREATE OR REPLACE TRIGGER "EUCOMM_VECTOR"."TR_GR_REDESIGN_ID"
    before insert on "GR_REDESIGN"
        for each row begin
            if inserting then
                if :NEW."GR_REDESIGN_ID" is null then
                    select S_GR_REDESIGN_ID.nextval into :NEW."GR_REDESIGN_ID" from dual;
                end if;
            end if;
        end;
/
ALTER TRIGGER "EUCOMM_VECTOR"."TR_GR_REDESIGN_ID" ENABLE;

CREATE OR REPLACE TRIGGER "EUCOMM_VECTOR"."TR_GR_GATEWAY_ID"
    before insert on "GR_GATEWAY"
        for each row begin
            if inserting then
                if :NEW."GR_GATEWAY_ID" is null then
                    select S_GR_GATEWAY_ID.nextval into :NEW."GR_GATEWAY_ID" from dual;
                end if;
            end if;
        end;
/
ALTER TRIGGER "EUCOMM_VECTOR"."TR_GR_GATEWAY_ID" ENABLE;

CREATE OR REPLACE TRIGGER "EUCOMM_VECTOR"."TR_GR_ALT_CLONE_ID"
    before insert on "GR_ALT_CLONE"
        for each row begin
            if inserting then
                if :NEW."GR_ALT_CLONE_ID" is null then
                    select S_GR_ALT_CLONE_ID.nextval into :NEW."GR_ALT_CLONE_ID" from dual;
                end if;
            end if;
        end;
/
ALTER TRIGGER "EUCOMM_VECTOR"."TR_GR_ALT_CLONE_ID" ENABLE;

CREATE OR REPLACE TRIGGER "EUCOMM_VECTOR"."TR_GRC_REDESIGN_ID"
    before insert on "GRC_REDESIGN"
        for each row begin
            if inserting then
                if :NEW."GRC_REDESIGN_ID" is null then
                    select S_GRC_REDESIGN_ID.nextval into :NEW."GRC_REDESIGN_ID" from dual;
                end if;
            end if;
        end;
/
ALTER TRIGGER "EUCOMM_VECTOR"."TR_GRC_REDESIGN_ID" ENABLE;

CREATE OR REPLACE TRIGGER "EUCOMM_VECTOR"."TR_GRC_GATEWAY_ID"
    before insert on "GRC_GATEWAY"
        for each row begin
            if inserting then
                if :NEW."GRC_GATEWAY_ID" is null then
                    select S_GRC_GATEWAY_ID.nextval into :NEW."GRC_GATEWAY_ID" from dual;
                end if;
            end if;
        end;
/
ALTER TRIGGER "EUCOMM_VECTOR"."TR_GRC_GATEWAY_ID" ENABLE;

CREATE OR REPLACE TRIGGER "EUCOMM_VECTOR"."TR_GRC_RESEQ_ID"
    before insert on "GRC_RESEQ"
        for each row begin
            if inserting then
                if :NEW."GRC_RESEQ_ID" is null then
                    select S_GRC_RESEQ_ID.nextval into :NEW."GRC_RESEQ_ID" from dual;
                end if;
            end if;
        end;
/
ALTER TRIGGER "EUCOMM_VECTOR"."TR_GRC_RESEQ_ID" ENABLE;

CREATE OR REPLACE TRIGGER "EUCOMM_VECTOR"."TR_GRC_ALT_CLONE_CHOSEN_ID"
    before insert on "GRC_ALT_CLONE_CHOSEN"
        for each row begin
            if inserting then
                if :NEW."GRC_ALT_CLONE_CHOSEN_ID" is null then
                    select S_GRC_ALT_CLONE_CHOSEN_ID.nextval into :NEW."GRC_ALT_CLONE_CHOSEN_ID" from dual;
                end if;
            end if;
        end;
/
ALTER TRIGGER "EUCOMM_VECTOR"."TR_GRC_ALT_CLONE_CHOSEN_ID" ENABLE;

CREATE OR REPLACE TRIGGER "EUCOMM_VECTOR"."TR_GRC_ALT_CLONE_ALTERNATE_ID"
    before insert on "GRC_ALT_CLONE_ALTERNATE"
        for each row begin
            if inserting then
                if :NEW."GRC_ALT_CLONE_ALTERNATE_ID" is null then
                    select S_GRC_ALT_CLONE_ALTERNATE_ID.nextval into :NEW."GRC_ALT_CLONE_ALTERNATE_ID" from dual;
                end if;
            end if;
        end;
/
ALTER TRIGGER "EUCOMM_VECTOR"."TR_GRC_ALT_CLONE_ALTERNATE_ID" ENABLE;

CREATE OR REPLACE TRIGGER "EUCOMM_VECTOR"."TR_GR_GENE_STATUS_UPDATED"
    before insert or update on "GR_GENE_STATUS"
    for each row begin
        :NEW.UPDATED := sysdate;
    end;

/
ALTER TRIGGER "EUCOMM_VECTOR"."TR_GR_GENE_STATUS_UPDATED" ENABLE;

CREATE OR REPLACE TRIGGER "EUCOMM_VECTOR"."TR_GR_GENE_STATUS_HISTORY"
    after insert or update on "GR_GENE_STATUS"
    for each row begin
        INSERT INTO GR_GENE_STATUS_HISTORY( MGI_GENE_ID, STATE, NOTE, UPDATED )
        VALUES ( :NEW.MGI_GENE_ID, :NEW.STATE, :NEW.NOTE, :NEW.UPDATED );
    end;

/
ALTER TRIGGER "EUCOMM_VECTOR"."TR_GR_GENE_STATUS_HISTORY" ENABLE;

CREATE UNIQUE INDEX GR_REDESIGN_RDR_WELL ON GR_REDESIGN ( RDR_WELL_ID );

CREATE UNIQUE INDEX GR_GATEWAY_GWR_WELL ON GR_GATEWAY ( GWR_WELL_ID );

CREATE UNIQUE INDEX GR_ALT_CLONE_ACR_WELL ON GR_ALT_CLONE ( ACR_WELL_ID );

CREATE UNIQUE INDEX GRC_DESIGN_WELL ON GRC_REDESIGN ( DESIGN_WELL_ID );

CREATE UNIQUE INDEX GRC_GATEWAY_GWR_WELL ON GRC_GATEWAY ( PCS_WELL_ID );

CREATE UNIQUE INDEX GRC_RESEQ_TARGVEC_WELL ON GRC_RESEQ ( TARGVEC_WELL_ID );

CREATE UNIQUE INDEX GRC_ALT_CLONE_CHOSEN_WELL ON GRC_ALT_CLONE_CHOSEN ( CHOSEN_WELL_ID );

CREATE UNIQUE INDEX GRC_ALT_CLONE_ALTERNATE_WELL ON GRC_ALT_CLONE_ALTERNATE ( ALT_CLONE_WELL_ID );

